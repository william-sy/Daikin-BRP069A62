I did a man in the middle capture and found the following end points:

/[0]
/[0]/MNAE/0
/[0]/MNAE/0/DateTime/la
/[0]/MNAE/0/Error/la
/[0]/MNAE/0/UnitProfile/la
/[0]/MNAE/1
/[0]/MNAE/1/ChildLock/LockedState/la
/[0]/MNAE/1/ChildLock/PinCode/la
/[0]/MNAE/1/Consumption/la
/[0]/MNAE/1/Holiday/EndDate/la
/[0]/MNAE/1/Holiday/HolidayState/la
/[0]/MNAE/1/Holiday/StartDate/la
/[0]/MNAE/1/Operation/OperationMode/la
/[0]/MNAE/1/Operation/Power/la
/[0]/MNAE/1/Operation/TargetTemperature/la
/[0]/MNAE/1/Schedule/Next/la
/[0]/MNAE/1/Sensor/IndoorTemperature/la
/[0]/MNAE/1/Sensor/OutdoorTemperature/la
/[0]/MNAE/1/UnitIdentifier/Icon/la
/[0]/MNAE/1/UnitIdentifier/Name/la
/[0]/MNAE/1/UnitProfile/la
/[0]/MNAE/1/UnitStatus/EmergencyState/la
/[0]/MNAE/1/UnitStatus/ErrorState/la
/[0]/MNAE/1/UnitStatus/InstallerState/la
/[0]/MNAE/1/UnitStatus/TargetTemperatureOverruledState/la
/[0]/MNAE/1/UnitStatus/WarningState/la
/[0]/MNAE/2
/[0]/MNAE/2/ChildLock/LockedState/la
/[0]/MNAE/2/ChildLock/PinCode/la
/[0]/MNAE/2/Consumption/la
/[0]/MNAE/2/Holiday/EndDate/la
/[0]/MNAE/2/Holiday/HolidayState/la
/[0]/MNAE/2/Holiday/StartDate/la
/[0]/MNAE/2/Operation/OperationMode/la
/[0]/MNAE/2/Operation/Power/la
/[0]/MNAE/2/Operation/Powerful/la
/[0]/MNAE/2/Operation/TargetTemperature/la
/[0]/MNAE/2/Schedule/Next/la
/[0]/MNAE/2/Sensor/TankTemperature/la
/[0]/MNAE/2/UnitIdentifier/Icon/la
/[0]/MNAE/2/UnitIdentifier/Name/la
/[0]/MNAE/2/UnitInfo/UnitType/la
/[0]/MNAE/2/UnitProfile/la
/[0]/MNAE/2/UnitStatus/EmergencyState/la
/[0]/MNAE/2/UnitStatus/ErrorState/la
/[0]/MNAE/2/UnitStatus/InstallerState/la
/[0]/MNAE/2/UnitStatus/ReheatState/la
/[0]/MNAE/2/UnitStatus/TargetTemperatureOverruledState/la
/[0]/MNAE/2/UnitStatus/WarningState/la
/[0]/MNAE/2/UnitStatus/WeatherDependentState/la
/[0]/MNAE/3
/[0]/MNCSE-node/deviceInfo
/[0]/MNCSE-node/firmware
You can do a discovery of your device by asking for the [0]/MNAE/ and then a number. This will give you a response of what unit you are talking to:

Write packages:

{"m2m:rqp":{"op":1,"to":"/[0]/MNAE/1/Operation/Power","fr":"/S","rqi":"qwxxl","ty":4,"pc":{"m2m:cin":{"con":"on","cnf":"text/plain:0"}}}}
{"m2m:rsp":{"rsc":2001,"rqi":"qwxxl","to":"/S","fr":"/[0]/MNAE/1/Operation/Power"}}

{"m2m:rqp":{"op":1,"to":"/[0]/MNAE/2/Operation/Powerful","fr":"/S","rqi":"spcxt","ty":4,"pc":{"m2m:cin":{"con":1,"cnf":"text/plain:0"}}}}
{"m2m:rsp":{"rsc":2001,"rqi":"spcxt","to":"/S","fr":"/[0]/MNAE/2/Operation/Powerful"}}

{"m2m:rqp":{"op":1,"to":"/[0]/MNAE/2/Operation/Powerful","fr":"/S","rqi":"olpcx","ty":4,"pc":{"m2m:cin":{"con":0,"cnf":"text/plain:0"}}}}
{"m2m:rsp":{"rsc":2001,"rqi":"olpcx","to":"/S","fr":"/[0]/MNAE/2/Operation/Powerful"}}



{"m2m:rsp":{"rsc":2000,"rqi":"lcmsd","to":"/S","fr":"/[0]/MNAE/0","pc":{"m2m:cnt":{"rn":"0","ri":"006a","pi":"C0003","ty":3,"ct":"20000000T000000Z","lt":"20000000T000000Z","st":11,"lbl":"function/Adapter"}}}}
{"m2m:rsp":{"rsc":2000,"rqi":"lnjnp","to":"/S","fr":"/[0]/MNAE/2","pc":{"m2m:cnt":{"rn":"2","ri":"003c","pi":"C0003","ty":3,"ct":"20000000T000000Z","lt":"20000000T000000Z","st":13,"lbl":"function/DomesticHotWaterTank"}}}}
A non existing unit will give you a rsc:4004. The next step would then be to request the unit profile: /[0]/MNAE/2/UnitProfile/la which gives you a map of the end points that can be talked to and some information about what answers to expect (only the con part shown here):

{
   "Sensor":[
      "IndoorTemperature",
      "OutdoorTemperature"
   ],
   "UnitStatus":[
      "ErrorState",
      "InstallerState",
      "WarningState",
      "EmergencyState",
      "TargetTemperatureOverruledState"
   ],
   "Operation":{
      "Power":[
         "on",
         "standby"
      ],
      "OperationMode":[
         "heating"
      ],
      "TargetTemperature":{
         "heating":{
            "maxValue":30.0000000000000000,
            "minValue":12.0000000000000000,
            "stepValue":1.0000000000000000
         }
      }
   },
   "Schedule":{
      "Base":"action",
      "defaultScheduleAvailable":"true",
      "NameAdjustable":"false",
      "List":{
         "heating":[
            {
               "StartTime":{
                  "stepValue":10.0000000000000000,
                  "unit":"minutes"
               },
               "TargetTemperature":{
                  "heating":{
                     "maxValue":30.0000000000000000,
                     "minValue":12.0000000000000000,
                     "stepValue":1.0000000000000000
                  }
               },
               "Actions":[
                  "StartTime",
                  "TargetTemperature"
               ],
               "maxActionsAllowed":6
            },
            [
               "monday",
               "tuesday",
               "wednesday",
               "thursday",
               "friday",
               "saturday",
               "sunday"
            ],
            [
               "monday",
               "tuesday",
               "wednesday",
               "thursday",
               "friday",
               "saturday",
               "sunday"
            ],
            [
               "monday",
               "tuesday",
               "wednesday",
               "thursday",
               "friday",
               "saturday",
               "sunday"
            ],
            [

            ]
         ]
      }
   },
   "Consumption":{
      "Electrical":{
         "unit":"kWh",
         "Heating":{
            "Daily":{
               "contentCount":24,
               "resolution":2
            },
            "Weekly":{
               "contentCount":14,
               "resolution":1
            },
            "Monthly":{
               "contentCount":24,
               "resolution":1
            }
         }
      }
   }
}{
   "Sensor":[
      "TankTemperature"
   ],
   "UnitStatus":[
      "ErrorState",
      "InstallerState",
      "WeatherDependentState",
      "WarningState",
      "EmergencyState"
   ],
   "Operation":{
      "Power":[
         "on",
         "standby"
      ],
      "OperationMode":[
         "reheat_only"
      ],
      "TargetTemperature":{
         "reheat_only":{
            "maxValue":60.0000000000000000,
            "minValue":30.0000000000000000,
            "stepValue":1.0000000000000000
         }
      },
      "powerful":[
         "0",
         "1"
      ]
   },
   "Schedule":{

   },
   "Consumption":{
      "Electrical":{
         "unit":"kWh",
         "Heating":{
            "Daily":{
               "contentCount":24,
               "resolution":2
            },
            "Weekly":{
               "contentCount":14,
               "resolution":1
            },
            "Monthly":{
               "contentCount":24,
               "resolution":1
            }
         }
      }
   }
}
Notably interesting is the response to consumption:

{"Electrical":{"Heating":{"D":[0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,3,null],"W":[1,1,2,2,1,0,1,1,2,null,null,null,null,null],"M":[null,null,null,null,null,null,null,null,null,null,null,null,null,0,82,23,100,null,null,null,null,null,null,null]}}}
Unfortunately I donâ€™t have my heating on long enough to get some more interesting data. But I consider writing a proper Daikin adapter bundle as there is some interesting data on these.





====


Hey, I continued to investigate this API a bit and the consumption works as following:
For the daily row every even hour a new value is provided for the past 2 hours. Here is an example at 23h:

[0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,null]
One hour later at 0:01

[0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,null,null,null,null,null,null,null,null,null]
So the last value is essentially never written.
For the weekly this is the same on Sunday it looks like this:

"W":[7,8,4,9,1,3,3,1,3,3,8,1,4,null]
on Monday then:

"W":[1,3,3,8,1,4,2,null,null,null,null,null,null,null]
What I am not quite sure yet is what this consumption entails. I have 2 smartmeter (one for heating, the other for the rest of the house) and the numbers that I collect there during the heating phases are smaller, but not as much as I would expect for an air heat pump. I guess I should check the front panel of my unit to see as it reports both consumed and generated energy.

Date	Measured	Reported
2019-06-17	2,6	7
2019-06-18	2,8	8
2019-06-19	2	4
2019-06-20	3,2	9
2019-06-21	1	1
2019-06-22	1,6	3
2019-06-23	1,2	3
2019-06-24	1,3	1
2019-06-25	1,5	3
2019-06-26	1,3	3
2019-06-27	3,1	8
2019-06-28	0,8	1
2019-06-29	1,4	4
So here is my updated script now which works quite well:

from websocket import create_connection
import json, datetime, time, urllib
from urllib import request, parse
import random
import string

def randomString(stringLength=5):
    """Generate a random string of fixed length """
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(stringLength))

def postUdpate(item, value):
    if value is None:
        print("Not posting None value for "+item)
        return
    req =  request.Request("http://openhab:8080/rest/items/"+item+"/state", data=str(value).encode('utf-8')) # this will make the method "POST"
    req.add_header('Content-Type', 'text/plain')
    req.get_method = lambda: 'PUT'
    resp = request.urlopen(req)
    if resp.status!=202 :
        print("Response was %s %s" % (resp.status, resp.reason))

def requestValue(ws, item):
    ws.send("{\"m2m:rqp\":{\"op\":2,\"to\":\"/[0]/MNAE/"+item+"/la\",\"fr\":\"/OpenHab\",\"rqi\":\""+randomString()+"\"}}")
    result1 =  json.loads(ws.recv())
    #print("Response was: %s" % result1)
    value = result1["m2m:rsp"]["pc"]["m2m:cin"]["con"]
    return value

def requestYesterdaysConsumption(unitNumber):
    consumption=requestValue(ws, str(unitNumber)+"/Consumption")
    cj = json.loads(consumption)
    now = datetime.datetime.now()
    weeklyIndex=(now.weekday()-1)+7
    dailyUsage=cj["Electrical"]["Heating"]["W"][weeklyIndex]
    print("Received electrical weekly usage value '%s' for unit %s" % (dailyUsage, unitNumber))
    if dailyUsage is not None: #This may occur if your local time is more advanced
        return dailyUsage*1000 # than the heating unit.
    return None

def requestLast2HoursConsumption(unitNumber):
    consumption=requestValue(ws, str(unitNumber)+"/Consumption")
    cj = json.loads(consumption)
    now = datetime.datetime.now()
    hourlyIndex=((now.hour-2)//2)+12
    biHourly=cj["Electrical"]["Heating"]["D"][hourlyIndex]
    print("Received electrical daily usage value '%s' for unit %s" % (biHourly, unitNumber))
    if biHourly is not None:
        return biHourly*1000
    return None

ts = time.time()
timestamp = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')

ws = create_connection("ws://192.168.188.20/mca")

items =	{
  "Heating_TankTemperature": "2/Sensor/TankTemperature",
  "Heating_IndoorTemperature": "1/Sensor/IndoorTemperature",
  "Heating_OutdoorTemperature": "1/Sensor/OutdoorTemperature",
  "Heating_OperationPower": "1/Operation/Power",
  "Heating_OperationMode": "1/Operation/OperationMode",
  "Heating_OperationTargetTemperature": "1/Operation/TargetTemperature",
  "Heating_TankOperationPower": "2/Operation/Power",
  "Heating_TankOperationMode": "2/Operation/OperationMode",
  "Heating_TankOperationTargetTemperature": "2/Operation/TargetTemperature",
  "Heating_TankOperationPowerful": "2/Operation/Powerful",
  "Heating_ErrorState": "0/UnitStatus/ErrorState"
}

for x in items:
  value = requestValue(ws, items[x])
  print("Received value '%s' for %s" % (value, x))
  postUdpate(x, value)

postUdpate("Heating_BiHourlyEnergyHeat", requestLast2HoursConsumption(1))
postUdpate("Heating_BiHourlyEnergyWater", requestLast2HoursConsumption(2))
postUdpate("Heating_DailyEnergyHeat", requestYesterdaysConsumption(1))
postUdpate("Heating_DailyEnergyWater", requestYesterdaysConsumption(2))
ws.close()
I also captured some write packages, but apparently forgot to store them :wink: But what I recall is that OP is set to 1 for writing. I will re-check when I am back at home.





# {"m2m:rqp":{"op":2,"to":"/[0]/MNAE/1/Sensor/TankTemperature/la","fr":"/TarmoTest","rqi":"xijub"}}
# {"m2m:rqp":{"op":2,"to":"/[0]/MNAE/1/Operation/TargetTemperature/la","fr":"/TarmoTest","rqi":"yssyq"}}
# {"m2m:rqp":{"op":2,"to":"/[0]/MNAE/1/Operation/TargetTemperature/la","fr":"/TarmoTest","rqi":"yssyq"}}
# {"m2m:rqp":{"op":2,"to":"/[0]/MNAE/1/Operation/Power/la","fr":"/TarmoTest","rqi":"umufn"}}
# {"m2m:rqp":{"op":2,"to":"/[0]/MNAE/1/Operation/OperationMode/la","fr":"/TarmoTest","rqi":"nygjn"}}
# {"m2m:rqp":{"op":2,"to":"/[0]/MNAE/1/Operation/Powerful/la","fr":"/S3006ad02-d2f5-4cae-9b17-9be43d6f6408","rqi":"bswjp"}}




# ws.send("{\"m2m:rqp\":{\"op\":2,\"to\":\"/[0]/MNAE/1/Sensor/TankTemperature/la\",\"fr\":\"/TarmoTest\",\"rqi\":\"xijub\"}}")
# result1 =  json.loads(ws.recv())
# ws.send("{\"m2m:rqp\":{\"op\":2,\"to\":\"/[0]/MNAE/1/schedule/List/heating/Cin-Heating/la\",\"fr\":\"/TarmoTest\",\"rqi\":\"yssyq\"}}")
# result2 = json.loads(ws.recv())
# ws.send("{\"m2m:rqp\":{\"op\":2,\"to\":\"/[0]/MNAE/1/Operation/Power/la\",\"fr\":\"/TarmoTest\",\"rqi\":\"umufn\"}}")
# result3 = json.loads(ws.recv())
# ws.send("{\"m2m:rqp\":{\"op\":2,\"to\":\"/[0]/MNAE/1/Operation/TargetTemperature/la\",\"fr\":\"/TarmoTest\",\"rqi\":\"yssyq\"}}")
# result4 = json.loads(ws.recv())
# ws.send("{\"m2m:rqp\":{\"op\":2,\"to\":\"/[0]/MNAE/1/Operation/Powerful/la\",\"fr\":\"/S3006ad02-d2f5-4cae-9b17-9be43d6f6408\",\"rqi\":\"bswjp\"}}")
# result5 = json.loads(ws.recv())
# ws.send("{\"m2m:rqp\":{\"op\":2,\"to\":\"/[0]/MNAE/1/Operation/OperationMode/la\",\"fr\":\"/TarmoTest\",\"rqi\":\"nygjn\"}}")
# result6 = json.loads(ws.recv())
#
# print(f"TankTemperature   {result1}")
# print("=======")
# print(f"Schedule {result2}")
# print("=======")
# print(f"Operation Power {result3}")
# print("=======")
# print(f"TargetTemperature {result4}")
# print("=======")
# print(f"Operation Powerful {result5}")
# print("=======")
# print(f"Operation Mode {result6}")
